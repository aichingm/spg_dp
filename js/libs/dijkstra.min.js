var Dijkstra=function(a){this.getPath=function(e,b){var d,c;this.data.distance[e]=0;while(this.data.set.length!==0){d=this.data.getVertexWithMinDistance();this.data.removeFromSet(d);for(c in this.map[d]){if(this.map[d].hasOwnProperty(c)&&this.data.inSet(c)){this.updateDistance(d,c)}}}return this.buildPath(b)};this.updateDistance=function(c,b){var d=this.data.distance[c]+this.map[c][b];if(d<this.data.distance[b]){this.data.distance[b]=d;this.data.previous[b]=c}};this.buildPath=function(b){if(this.data.distance[b]===Number.MAX_VALUE){throw {name:"NoRoute",error:"No Route",from:this.data.findStart(),to:b}}var d=[b],c=b;while(this.data.previous[c]){c=this.data.previous[c];d.push(c)}return d.reverse()};this.DijkstraWorkingData=function(b){this.distance=[];this.previous=[];this.set=[];this.init=function(d){var c;for(c in d){if(d.hasOwnProperty(c)){this.distance[c]=Number.MAX_VALUE;this.previous[c]=undefined;this.set.push(c)}}};this.init(b);this.getVertexWithMinDistance=function(){var f=this.set[0],c=Number.MAX_VALUE,e,d;for(e in this.set){if(this.set.hasOwnProperty(e)){d=this.set[e];if(this.distance[d]<c){c=this.distance[d];f=d}}}return f};this.removeFromSet=function(e){var d,c;for(d in this.set){if(this.set.hasOwnProperty(d)&&this.set[d]===e){c=this.set.indexOf(this.set[d]);if(c!==-1){this.set.splice(c,1)}}}};this.inSet=function(c){return this.set.indexOf(c)!==-1};this.findStart=function(){var c;for(c in this.distance){if(this.distance[c]===0&&this.previous[c]===undefined){return c}}};return this};this.map=a;this.data=new this.DijkstraWorkingData(a);return this};if(module){module.exports.Dijkstra=Dijkstra};